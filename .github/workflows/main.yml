
# DX@Scale CI/CD Template for GitHub
#----------------------------------------------------------------------------------------------------
# Maintained by @aly76 for DX@Scale
# Follows reference pipeline available at docs.dxatscale.io
# 
#-----------------------------------------------------------------------------------------------------
# To know more about dxatscale, visit https://docs.dxatscale.io
# To know more on sfpowerscripts, visit- https://sfpowerscripts.dxatscale.io/
# To know more on sfpowerkit, visit- https://github.com/Accenture/sfpowerkit


# This pipeline is used to release a set of packages into respective environments
# Changelog will be written to changelog branch

name: 'User: Build & Release Preview'


on:
  workflow_dispatch:


#Set the environment variables for tracking metrics
#env:
  #SFPOWERSCRIPTS_NEWRELIC: 'true'
  #SFPOWERSCRIPTS_NEWRELIC_API_KEY: '${{ secrets.NEWRELIC_INSIGHT_INSERT_KEYS }}'
  #SFPOWERSCRIPTS_DATADOG: 'true'
  #SFPOWERSCRIPTS_DATADOG_HOST: '${{ secrets.DATADOG_HOST }}'
  #SFPOWERSCRIPTS_DATADOG_API_KEY: '${{ secrets.DATADOG_API_KEY }}'

env:
  RELEASE_NAME: "release-1.${{ github.run_number }}"
  DEVHUB_USER_NAME: "igor.kudryk@dmc.valantic.com.vdmc-tech-onboarding"
  GIT_USERNAME: "igor.kudryk@dmc.valantic.com"
  ID: ""
  VERSION: ""

jobs:
  prepare:
    name: 'Build Release'
    runs-on: ubuntu-latest
    container: ghcr.io/dxatscale/sfpowerscripts:latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Authenticate to PREVIEW
        run: |
            echo "${{ secrets.PREVIEW_SFDX_AUTH_URL }}" > ./authfile
            sfdx auth:sfdxurl:store -f ./authfile -a preview
      
      - name: Authenticate to DevHub sandbox
        run: |
          echo "${{ secrets.DEVHUB_SFDX_AUTH_URL }}" > ./authfile
          sfdx auth:sfdxurl:store -f authfile -a devhub
          sfdx config:set defaultdevhubusername="${{ env.DEVHUB_USER_NAME }}"

      - name: Create new version of package
        run: |
          sfdx force:package:version:create -p VdmcCorePackage -k aGq48vzC07 --wait 10 --codecoverage > output.txt
          cat output.txt
          ids=$(grep -o '04t.*$' output.txt)
          id=$(echo $ids | cut -d' ' -f1)
          echo "The id of a new package is $id"
          echo "ID=$id" >> $GITHUB_ENV

      - name: Promote the package
        run: |
          sfdx force:package:install --package "${{ env.ID }}" -u preview -k aGq48vzC07 --wait 10
          sfdx force:package:version:promote -p "${{ env.ID }}" --noprompt --json > jsonoutput.json
      
      - name: Update the sfdx-project.json with the new package version
        run: |
          sudo apt install jq
          json=$(<sfdx-project.json)
          version=$(echo $json | jq -r '.packageDirectories[0].versionNumber')
          number=$(echo $version | cut -d'.' -f3)
          number=$((number + 1))
          json=$(echo $json | jq ".packageDirectories[0].versionNumber = \"1.0.${number}.NEXT\"")
          echo $json > sfdx-project.json
          version_number=v${version%.NEXT}
          echo "VERSION=$version_number" >> $GITHUB_ENV

      - name: Update GitHub repository
        run: |
          cat sfdx-project.json
          git config --global --add safe.directory /__w/ValanticCoreTest/ValanticCoreTest
          git config --global user.name "${{ env.GIT_USERNAME }}"
          git config --global user.email "${{ env.GIT_USERNAME }}"
          git tag -a "${{ env.VERSION }}" -m "Id of the new package: ${{ env.ID }}"
          git add -A
          git commit -m "Increased version at sfdx-project"
          git push --follow-tags
